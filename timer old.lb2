[extension_name]
Timer
[extension_info]
Timer
[insert_external]
<div><p>Timer extension is installed. 
	<button id="example"  onclick="timertoggleVisibility('LBtimers')">View Active Timers</button>
    <div id="LBtimers"  style="display:none">  </div>
<!--
* @name: Timer, @version: 1.2, @author: Christinna#9031 (LB2 Port by Chrizzz_1508)
* --></p></div>
[insert_command]
LB.extCommand('Timer', 3355443, 52, {
	'name': ['name',14,''],
	'delay': ['delay',14,'']
	})
LB.extCommand('TimerDelete', 3355443, 52, {
	'name': ['name',14,''],
	'StopAll': ['StopAll(true/false)',18,1,null,['true','false']]
	})
[insert_hook]
case "Timer":{
	type="start"
    LBTimer(LioranBoardJSON.name,LioranBoardJSON.delay,type);
    }break
case "TimerDelete":{
	type="stop"
	LBTimer(LioranBoardJSON.name,LioranBoardJSON.StopAll,type)
    }break
[insert_script]
function LBTimer(name, value, type) {

switch (type) {
  case "start":
    try {
      lbchtimer77names.push(name)
      lbchtimer77values.push(value)
      lbchtimer77.push(value)
    } catch (err) {
      lbchtimer77names = []
      lbchtimer77values = []
      lbchtimer77 = []
      lbchtimer77names.push(name)
      lbchtimer77values.push(value)
      lbchtimer77.push(value)
    }

    if (typeof lbchtimer77init === 'undefined' || lbchtimer77init == 0) {
      lbchtimer77init = 1

      LbCh77StartTimer = setInterval(function() {
        lbchtimer77 = lbchtimer77.map(function(value) {
          return value - 1000;
        });
        var check_time = lbchtimer77.findIndex(n => n < 0);
        //console.log(lbchtimer77)
        if (check_time !== -1) {
            lbchtimer77[check_time] = lbchtimer77values[check_time]
		  LB.triggerExt(name)
        }
        console.log(lbchtimer77names)
        console.log(lbchtimer77)
      }, 1000);
    }

    break;

  case "stop":
    if (value == 0) {
      Stopalltimers()
    } else {
      try {
        let index = lbchtimer77names.indexOf(name);
        if (index !== -1) {
          lbchtimer77names.splice(index, 1);
          lbchtimer77values.splice(index, 1);
          lbchtimer77.splice(index, 1);
        }
        if (lbchtimer77names.length < 1) {
          Stopalltimers()
        }
      } catch (err) {}
    }

    function Stopalltimers() {
      try {
        clearInterval(LbCh77StartTimer
)
        lbchtimer77init = 0
        lbchtimer77names = []
        lbchtimer77values = []
        lbchtimer77 = []
      } catch (err) {}
    }

    break;
}
}

function timertoggleVisibility(id) {

var e = document.getElementById(id);
if (e.style.display == 'block')
  e.style.display = 'none';
else
  e.style.display = 'block';
try {
  if (lbchtimer77names.length > 0) {
    e.innerHTML = ""
    var i
    for (i = 0; i < lbchtimer77names.length; i++) {
      e.innerHTML = e.innerHTML + (" " + lbchtimer77names[i] + " (" + ((lbchtimer77[i]) / 60000).toFixed(1) + " min), ")

    }
  } else {
    e.innerHTML = "No timers are currently active."
  }
} catch (err) {
  e.innerHTML = "No timers are currently active."
}
}
[insert_over]
